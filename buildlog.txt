# Bake Begins!
### (1 of 6) Copy sources
$ cp -a /home/travis/build/fontdirectory/andika/METADATA.json /home/travis/build/fontdirectory/andika/builds/build
$ cp -a /home/travis/build/fontdirectory/andika/DESCRIPTION.en_us.html /home/travis/build/fontdirectory/andika/builds/build
$ cp -a /home/travis/build/fontdirectory/andika/FONTLOG.txt /home/travis/build/fontdirectory/andika/builds/build
$ cp -a Andika-R.ttf.ttx sources/Andika-R-designsource.otf.ttx Andika-R.ttf.G_S_U_B_.ttx Andika-R.ttf.S__i_l_t.ttx Andika-R.ttf.L_T_S_H_.ttx Andika-R.ttf._p_r_e_p.ttx Andika-R.ttf._c_m_a_p.ttx Andika-R.ttf.S__i_l_f.ttx Andika-R.ttf.G__l_a_t.ttx Andika-R.ttf._n_a_m_e.ttx Andika-R.ttf.G__l_o_c.ttx Andika-R.ttf.F__e_a_t.ttx Andika-R.ttf._h_e_a_d.ttx Andika-R.ttf._h_m_t_x.ttx Andika-R.ttf._m_a_x_p.ttx Andika-R.ttf._c_v_t.ttx Andika-R.ttf.D_S_I_G_.ttx Andika-R.ttf._g_l_y_f.ttx Andika-R.ttf._l_o_c_a.ttx Andika-R.ttf.GlyphOrder.ttx Andika-R.ttf.S__i_l_l.ttx Andika-R.ttf.V_D_M_X_.ttx Andika-R.ttf.G_P_O_S_.ttx Andika-R.ttf._p_o_s_t.ttx Andika-R.ttf.O_S_2f_2.ttx Andika-R.ttf.G_D_E_F_.ttx Andika-R.ttf._g_a_s_p.ttx Andika-R.ttf._h_d_m_x.ttx Andika-R.ttf._f_p_g_m.ttx Andika-R.ttf._h_h_e_a.ttx sources/Andika-R-designsource.otf._c_m_a_p.ttx sources/Andika-R-designsource.otf.GlyphOrder.ttx sources/Andika-R-designsource.otf._m_a_x_p.ttx sources/Andika-R-designsource.otf.O_S_2f_2.ttx sources/Andika-R-designsource.otf._n_a_m_e.ttx sources/Andika-R-designsource.otf._h_m_t_x.ttx sources/Andika-R-designsource.otf._h_h_e_a.ttx sources/Andika-R-designsource.otf._p_o_s_t.ttx sources/Andika-R-designsource.otf.C_F_F_.ttx sources/Andika-R-designsource.otf._h_e_a_d.ttx /home/travis/build/fontdirectory/andika/builds/build/sources
### (2 of 6) pyfontaine
### (3 of 6) Run upstream tests
$ fontbakery-check.py upstream-repo sources
bakery_lint.tests.upstream.test_diacritic.TestDiacritic.test_diacritic_made_as_component(): OK
$ fontaine --collections subsets --text /home/travis/build/fontdirectory/andika/builds/build/sources/Andika-R-designsource.otf.ttx /home/travis/build/fontdirectory/andika/builds/build/sources/Andika-R.ttf.ttx > fontaine.txt
bakery_lint.tests.upstream.test_diacritic.TestDiacritic.test_diacritic_made_as_mark_to_mark(): OK
bakery_lint.tests.upstream.test_diacritic.TestDiacritic.test_diacritic_made_as_own_glyphs(): OK
bakery_lint.tests.upstream.test_check_upstream_sources.ProjectUpstreamTestCase.test_bakery_yaml_exists(): OK
bakery_lint.tests.upstream.test_check_upstream_sources.ProjectUpstreamTestCase.test_copyright_notices_same_across_family(): OK
bakery_lint.tests.upstream.test_check_upstream_sources.ProjectUpstreamTestCase.test_description_html_exists(): OK
bakery_lint.tests.upstream.test_check_upstream_sources.ProjectUpstreamTestCase.test_fontlog_txt_exists(): OK
bakery_lint.tests.upstream.test_check_upstream_sources.ProjectUpstreamTestCase.test_metadata_json_exists(): OK
WARNING: Please install [PyICU](https://pypi.python.org/pypi/PyICU) toenable [feature], perhaps with: pip install pyicu
end of pyfontaine process
bakery_lint.tests.upstream.test_prepolation.FontTestPrepolation.test_font_prepolation_glyph_contours(): OK
bakery_lint.tests.upstream.test_prepolation.FontTestPrepolation.test_font_prepolation_glyph_points(): OK
bakery_lint.tests.upstream.test_prepolation.FontTestPrepolation.test_font_test_prepolation_glyph_names(): OK
$ fontbakery-check.py upstream-ttx Andika-R-designsource.otf.ttx
bakery_lint.tests.upstream.test_check_ttx_fontfamily_recommendations.TTX_FontFamilyNamingTest.test_ttx_family_naming_recommendation(): OK
bakery_lint.tests.upstream.test_check_ttx_requirements.SourceTTXTest.test_epar_in_keys(): FAIL
bakery_lint.tests.upstream.test_check_ttx_requirements.SourceTTXTest.test_os2_in_keys(): OK
bakery_lint.tests.upstream.test_check_ttx_requirements.SourceTTXTest.test_ttx_doesnt_contain_duplicate_glyphs(): OK
bakery_lint.tests.upstream.test_glyphname_does_not_contain_disallowed_chars.TestGlyphNameDoesNotContainsDisallowedChars.test_glyphname_does_not_contain_disallowed_chars(): FAIL
bakery_lint.tests.upstream.test_font_filename_eq_familystyle.TestTTFSourceFontFileNameEqualsFamilyStyle.test_source_ttf_font_filename_equals_familystyle(): FAIL
$ mv /home/travis/build/fontdirectory/andika/builds/build/sources/Andika-R-designsource.otf.ttx /home/travis/build/fontdirectory/andika/builds/build/sources/Andika-Regular.ttx
bakery_lint.tests.upstream.test_font_filename_eq_familystyle.TestTTFSourceFontFileNameEqualsFamilyStyle.test_source_ttf_font_filename_equals_familystyle(): OK
$ fontbakery-check.py upstream-ttx Andika-R.ttf.ttx
bakery_lint.tests.upstream.test_check_ttx_fontfamily_recommendations.TTX_FontFamilyNamingTest.test_ttx_family_naming_recommendation(): OK
bakery_lint.tests.upstream.test_check_ttx_requirements.SourceTTXTest.test_epar_in_keys(): FAIL
bakery_lint.tests.upstream.test_check_ttx_requirements.SourceTTXTest.test_os2_in_keys(): OK
bakery_lint.tests.upstream.test_check_ttx_requirements.SourceTTXTest.test_ttx_doesnt_contain_duplicate_glyphs(): OK
bakery_lint.tests.upstream.test_glyphname_does_not_contain_disallowed_chars.TestGlyphNameDoesNotContainsDisallowedChars.test_glyphname_does_not_contain_disallowed_chars(): FAIL
bakery_lint.tests.upstream.test_font_filename_eq_familystyle.TestTTFSourceFontFileNameEqualsFamilyStyle.test_source_ttf_font_filename_equals_familystyle(): FAIL
$ mv /home/travis/build/fontdirectory/andika/builds/build/sources/Andika-R.ttf.ttx /home/travis/build/fontdirectory/andika/builds/build/sources/Andika-Regular.ttx
bakery_lint.tests.upstream.test_font_filename_eq_familystyle.TestTTFSourceFontFileNameEqualsFamilyStyle.test_source_ttf_font_filename_equals_familystyle(): OK
### (4 of 6) Convert sources to TTF
$ ttx -d /home/travis/build/fontdirectory/andika/builds/build /home/travis/build/fontdirectory/andika/builds/build/sources/Andika-Regular.ttx
Compiling "/home/travis/build/fontdirectory/andika/builds/build/sources/Andika-Regular.ttx" to "/home/travis/build/fontdirectory/andika/builds/build/Andika-Regular.ttf"...
Parsing 'GlyphOrder' table...
Parsing 'head' table...
Parsing 'hhea' table...
Parsing 'maxp' table...
Parsing 'OS/2' table...
Parsing 'hmtx' table...
Parsing 'LTSH' table...
Parsing 'VDMX' table...
Parsing 'hdmx' table...
Parsing 'cmap' table...
Parsing 'fpgm' table...
Parsing 'prep' table...
Parsing 'cvt ' table...
Parsing 'loca' table...
Parsing 'glyf' table...
Parsing 'name' table...
Parsing 'post' table...
Parsing 'gasp' table...
Parsing 'Feat' table...
Parsing 'GDEF' table...
Parsing 'GPOS' table...
Parsing 'GSUB' table...
Parsing 'Glat' table...
Parsing 'Gloc' table...
Parsing 'Silf' table...
Parsing 'Sill' table...
Parsing 'Silt' table...
Parsing 'DSIG' table...
### Test Andika-Regular.ttf
$ fontbakery-check.py result Andika-Regular.ttf
bakery_lint.tests.downstream.test_check_names_same_across_platforms.CheckNamesSameAcrossPlatforms.test_check_names_same_across_platforms(): FAIL
bakery_lint.tests.downstream.test_check_unencoded_glyph.TestFontUnencodedGlyph.test_font_unencoded_glyphs(): FAIL
$ fontbakery-fix-glyph-private-encoding.py --autofix /home/travis/build/fontdirectory/andika/builds/build/Andika-Regular.ttf
$ mv /home/travis/build/fontdirectory/andika/builds/build/Andika-Regular.ttf.fix /home/travis/build/fontdirectory/andika/builds/build/Andika-Regular.ttf
bakery_lint.tests.downstream.test_check_unencoded_glyph.TestFontUnencodedGlyph.test_font_unencoded_glyphs(): FAIL
bakery_lint.tests.downstream.test_check_magic_prep_code.CheckMagicPREPByteCode.test_prep_magic_code(): FAIL
bakery_lint.tests.downstream.test_check_no_problematic_formats.CheckNoProblematicFormats.test_check_no_problematic_formats(): OK
bakery_lint.tests.downstream.test_check_vertical_metrics.CheckVerticalLinegapMetrics.test_metrics_linegaps_are_zero(): OK
bakery_lint.tests.downstream.test_check_vertical_metrics.CheckVerticalAscentMetrics.test_metrics_ascents_equal_bbox(): FAIL
$ fontbakery-fix-vertical-metrics.py --autofix /home/travis/build/fontdirectory/andika/builds/build/Andika-Regular.ttf
$ mv /home/travis/build/fontdirectory/andika/builds/build/Andika-Regular.ttf.fix /home/travis/build/fontdirectory/andika/builds/build/Andika-Regular.ttf
$ fontbakery-fix-vertical-metrics.py /home/travis/build/fontdirectory/andika/builds/build/Andika-Regular.ttf
Parameter              Andika-Regular.ttf    
ymax                   2810                  
hhea.ascent            2810                  
OS/2.sTypoAscender     2810                  
OS/2.usWinAscent       2810                  
ymin                   -1148                 
hhea.descent           -1148                 
OS/2.sTypoDescender    -1148                 
OS/2.usWinDescent      1148                  
hhea.lineGap           0                     
OS/2.sTypoLineGap      0                     
hhea total             3958                  
typo total             3958                  
win total              3958                  
UPM:Heights            2048:3958             
UPM:Heights %          193 %                 


bakery_lint.tests.downstream.test_check_vertical_metrics.CheckVerticalAscentMetrics.test_metrics_ascents_equal_bbox(): OK
bakery_lint.tests.downstream.test_check_vertical_metrics.CheckVerticalDescentMetrics.test_metrics_descents_equal_bbox(): OK
bakery_lint.tests.downstream.test_names_are_ascii_only.CheckNamesAreASCIIOnly.test_check_names_are_ascii_only(): FAIL
$ fontbakery-fix-ascii-fontmetadata.py /home/travis/build/fontdirectory/andika/builds/build/Andika-Regular.ttf
$ mv /home/travis/build/fontdirectory/andika/builds/build/Andika-Regular.ttf.fix /home/travis/build/fontdirectory/andika/builds/build/Andika-Regular.ttf
bakery_lint.tests.downstream.test_names_are_ascii_only.CheckNamesAreASCIIOnly.test_check_names_are_ascii_only(): OK
bakery_lint.tests.downstream.test_check_license_included.CheckLicenseIncluded.test_license_included_in_font_names(): OK
bakery_lint.tests.downstream.test_check_name_table_recommendation.CheckStyleNameRecommendation.test_check_stylename_is_under_recommendations(): OK
bakery_lint.tests.downstream.test_check_name_table_recommendation.CheckOTFamilyNameRecommendation.test_check_opentype_familyname(): FAIL
$ fontbakery-fix-opentype-names.py /home/travis/build/fontdirectory/andika/builds/build/Andika-Regular.ttf
$ mv /home/travis/build/fontdirectory/andika/builds/build/Andika-Regular.ttf.fix /home/travis/build/fontdirectory/andika/builds/build/Andika-Regular.ttf
bakery_lint.tests.downstream.test_check_name_table_recommendation.CheckOTFamilyNameRecommendation.test_check_opentype_familyname(): OK
bakery_lint.tests.downstream.test_check_name_table_recommendation.CheckOTStyleNameRecommendation.test_check_opentype_stylename(): OK
bakery_lint.tests.downstream.test_check_name_table_recommendation.CheckOTFullNameRecommendation.test_check_opentype_fullname(): OK
bakery_lint.tests.downstream.test_check_upm_heights_less_120.TestCheckUPMHeightsLess120.test_check_upm_heigths_less_120(): FAIL
The following table(s) in the font have been ignored by FontForge
  Ignoring 'DSIG' digital signature table
  Ignoring 'Feat' SIL Graphite layout feature table
  Ignoring 'Glat' Graphite glyph attribute table
  Ignoring 'Gloc' Graphite glyph location in Glat table
  Ignoring 'LTSH' linear threshold table
  Ignoring 'Silf' SIL Graphite rule table
  Ignoring 'Sill' (unspecified) SIL Graphite table
  Ignoring 'Silt' unknown SIL table
  Ignoring 'VDMX' vertical device metrics table
  Ignoring 'hdmx' horizontal device metrics table
The glyph named aacute is mapped to U+F0069.
But its name indicates it should be mapped to U+00E1.
The glyph named agrave is mapped to U+F006A.
But its name indicates it should be mapped to U+00E0.
The glyph named acircumflex is mapped to U+F006B.
But its name indicates it should be mapped to U+00E2.
The glyph named adieresis is mapped to U+F006C.
But its name indicates it should be mapped to U+00E4.
The glyph named atilde is mapped to U+F006D.
But its name indicates it should be mapped to U+00E3.
The glyph named aring is mapped to U+F006E.
But its name indicates it should be mapped to U+00E5.
The glyph named uni2090 is mapped to U+F00E4.
But its name indicates it should be mapped to U+2090.
The glyph named uni1D43 is mapped to U+F00E6.
But its name indicates it should be mapped to U+1D43.
The glyph named uni0201 is mapped to U+F00EA.
But its name indicates it should be mapped to U+0201.
The glyph named uni1EAD is mapped to U+F00EB.
But its name indicates it should be mapped to U+1EAD.
The glyph named uni1EA5 is mapped to U+F00EC.
But its name indicates it should be mapped to U+1EA5.
The glyph named uni1EA7 is mapped to U+F00F0.
But its name indicates it should be mapped to U+1EA7.
The glyph named uni1EAB is mapped to U+F00F4.
But its name indicates it should be mapped to U+1EAB.
The glyph named uni1EA9 is mapped to U+F00F8.
But its name indicates it should be mapped to U+1EA9.
The glyph named uni0203 is mapped to U+F00FC.
But its name indicates it should be mapped to U+0203.
The glyph named abreve is mapped to U+F00FD.
But its name indicates it should be mapped to U+0103.
The glyph named uni1EB7 is mapped to U+F00FE.
But its name indicates it should be mapped to U+1EB7.
The glyph named uni1EAF is mapped to U+F00FF.
But its name indicates it should be mapped to U+1EAF.
The glyph named uni1EB1 is mapped to U+F0102.
But its name indicates it should be mapped to U+1EB1.
The glyph named uni1EB5 is mapped to U+F0105.
But its name indicates it should be mapped to U+1EB5.
The glyph named uni1EB3 is mapped to U+F0108.
But its name indicates it should be mapped to U+1EB3.
The glyph named uni01CE is mapped to U+F010C.
But its name indicates it should be mapped to U+01CE.
The glyph named amacron is mapped to U+F0110.
But its name indicates it should be mapped to U+0101.
The glyph named uni01DF is mapped to U+F0119.
But its name indicates it should be mapped to U+01DF.
The glyph named uni0227 is mapped to U+F011A.
But its name indicates it should be mapped to U+0227.
The glyph named uni01E1 is mapped to U+F011B.
But its name indicates it should be mapped to U+01E1.
The glyph named aringacute is mapped to U+F011C.
But its name indicates it should be mapped to U+01FB.
The glyph named uni1E9A is mapped to U+F011D.
But its name indicates it should be mapped to U+1E9A.
The glyph named uni1EA3 is mapped to U+F011E.
But its name indicates it should be mapped to U+1EA3.
The glyph named uni1EA1 is mapped to U+F0127.
But its name indicates it should be mapped to U+1EA1.
The glyph named uni1E01 is mapped to U+F012C.
But its name indicates it should be mapped to U+1E01.
The glyph named aogonek is mapped to U+F0134.
But its name indicates it should be mapped to U+0105.
The glyph named uni2C65 is mapped to U+F0139.
But its name indicates it should be mapped to U+2C65.
The glyph named a is mapped to U+F0143.
But its name indicates it should be mapped to U+0061.
The glyph named f_i is mapped to U+F03E8.
But its name indicates it should be mapped to U+FB01.
The glyph named f_l is mapped to U+F03EC.
But its name indicates it should be mapped to U+FB02.
The glyph named f_f_i is mapped to U+F03F0.
But its name indicates it should be mapped to U+FB03.
The glyph named f_f_l is mapped to U+F03F5.
But its name indicates it should be mapped to U+FB04.
The glyph named f_f is mapped to U+F03FA.
But its name indicates it should be mapped to U+FB00.
The glyph named uni1D4D is mapped to U+F041C.
But its name indicates it should be mapped to U+1D4D.
The glyph named uni01F5 is mapped to U+F041E.
But its name indicates it should be mapped to U+01F5.
The glyph named gcircumflex is mapped to U+F041F.
But its name indicates it should be mapped to U+011D.
The glyph named gbreve is mapped to U+F0420.
But its name indicates it should be mapped to U+011F.
The glyph named gcaron is mapped to U+F0421.
But its name indicates it should be mapped to U+01E7.
The glyph named uni1E21 is mapped to U+F0422.
But its name indicates it should be mapped to U+1E21.
The glyph named gdotaccent is mapped to U+F0424.
But its name indicates it should be mapped to U+0121.
The glyph named gcommaaccent is mapped to U+F0427.
But its name indicates it should be mapped to U+0123.
The glyph named uni01E5 is mapped to U+F0429.
But its name indicates it should be mapped to U+01E5.
The glyph named g is mapped to U+F042A.
But its name indicates it should be mapped to U+0067.
The glyph named uni01B4 is mapped to U+F0943.
But its name indicates it should be mapped to U+01B4.
The glyph named uni01B3 is mapped to U+F095E.
But its name indicates it should be mapped to U+01B3.
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_allowed_numbers_paths_in_composite_glyphs(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_allowed_numbers_paths_in_glyphs(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_allowed_numbers_points_in_composite_glyphs(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_allowed_numbers_points_in_glyphs(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_duplicate_glyphs(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_duplicate_unicode_codepoints(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_flipped_reference_in_glyphs(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_missing_anchors(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_missing_extrema_in_glyphs(): FAIL
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_overlapped_hints(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_points_are_integer_aligned(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_points_are_not_too_far_apart(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_postscript_hasnt_limit_hints_in_glyphs(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_postscript_hasnt_limit_points_in_glyphs(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_referenced_glyphs_are_present(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_valid_glyph_names(): FAIL
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_valid_length_instructions(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_validation_glyph_intersect(): FAIL
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_validation_open_contours(): OK
bakery_lint.tests.downstream.test_fontforge_validation_state.FontForgeValidateStateTest.test_wrong_direction_in_glyphs(): FAIL
bakery_lint.tests.downstream.test_check_full_font_name_begins_with_family_name.CheckFullFontNameBeginsWithFamilyName.test_check_full_font_name_begins_with_family_name(): OK
bakery_lint.tests.downstream.test_check_unused_glyph_data.CheckUnusedGlyphData.test_check_unused_glyph_data(): ERROR
bakery_lint.tests.downstream.test_check_italic_angle_agreement.CheckItalicAngleAgreement.test_check_italic_angle_agreement(): OK
bakery_lint.tests.downstream.test_check_glyf_table_length.CheckGlyfTableLength.test_check_glyf_table_length(): FAIL
bakery_lint.tests.downstream.test_check_panose_identification.CheckPanoseIdentification.test_check_panose_identification(): OK
bakery_lint.tests.downstream.test_check_font_tables.CheckFontHasDsigTable.test_check_font_has_dsig_table(): OK
bakery_lint.tests.downstream.test_check_font_tables.CheckFontHasNotKernTable.test_no_kern_table_exists(): OK
bakery_lint.tests.downstream.test_check_glyph_existence.CheckGlyphExistence.test_euro(): OK
bakery_lint.tests.downstream.test_check_glyph_existence.CheckGlyphExistence.test_nbsp(): OK
bakery_lint.tests.downstream.test_check_glyph_existence.CheckGlyphExistence.test_space(): OK
bakery_lint.tests.downstream.test_gpos_table_has_kerning_info.CheckGposTableHasKerningInfo.test_gpos_table_has_kerning_info(): FAIL
bakery_lint.tests.downstream.test_gasp_table_value.CheckGaspTableType.test_check_gasp_table_type(): FAIL
$ fontbakery-fix-gasp.py --set=15 /home/travis/build/fontdirectory/andika/builds/build/Andika-Regular.ttf
$ mv /home/travis/build/fontdirectory/andika/builds/build/Andika-Regular.ttf.fix /home/travis/build/fontdirectory/andika/builds/build/Andika-Regular.ttf
bakery_lint.tests.downstream.test_gasp_table_value.CheckGaspTableType.test_check_gasp_table_type(): OK
$ fontbakery-fix-gasp.py --set=15 /home/travis/build/fontdirectory/andika/builds/build/Andika-Regular.ttf
$ mv /home/travis/build/fontdirectory/andika/builds/build/Andika-Regular.ttf.fix /home/travis/build/fontdirectory/andika/builds/build/Andika-Regular.ttf
bakery_lint.tests.downstream.test_check_fontname_matches_macstyle.CheckFontNameEqualToMacStyleFlags.test_fontname_is_equal_to_macstyle(): FAIL
bakery_lint.tests.downstream.test_check_font_agreements.CheckFsTypeIsNotSet.test_is_fstype_not_set(): OK
$ fontbakery-fix-fstype.py --autofix /home/travis/build/fontdirectory/andika/builds/build/Andika-Regular.ttf
$ mv /home/travis/build/fontdirectory/andika/builds/build/Andika-Regular.ttf.fix /home/travis/build/fontdirectory/andika/builds/build/Andika-Regular.ttf
bakery_lint.tests.downstream.test_check_font_agreements.CheckFontAgreements.test_em_is_1000(): FAIL
bakery_lint.tests.downstream.test_check_font_agreements.CheckFontAgreements.test_font_is_font(): OK
bakery_lint.tests.downstream.test_check_font_agreements.CheckFontAgreements.test_latin_file_exists(): FAIL
bakery_lint.tests.downstream.test_check_font_agreements.CheckFontAgreements.test_menu_file_exists(): FAIL
bakery_lint.tests.downstream.test_check_nbsp_width_matches_sp_width.CheckNbspWidthMatchesSpWidth.test_check_nbsp_width_matches_sp_width(): OK
bakery_lint.tests.downstream.test_check_hmtx_hhea_max_advance_width_agreement.CheckHmtxHheaMaxAdvanceWidthAgreement.test_check_hmtx_hhea_max_advance_width_agreement(): OK
bakery_lint.tests.downstream.test_check_os2_width_class.CheckOS2WidthClass.test_check_os2_width_class(): OK
### Optimize TTF Andika-Regular.ttf
$ ls -l 'Andika-Regular.ttf'* # look at the size savings of that subset process
Andika-Regular.ttf.opt: 1025604 bytes
Andika-Regular.ttf: 1460292 bytes
$ mv /home/travis/build/fontdirectory/andika/builds/build/Andika-Regular.ttf.opt /home/travis/build/fontdirectory/andika/builds/build/Andika-Regular.ttf
### Autohint TTFs (ttfautohint) Andika-Regular.ttf
$ ttfautohint -l 7 -r 28 -G 50 -x 13 -w "G" /home/travis/build/fontdirectory/andika/builds/build/Andika-Regular.ttf '/home/travis/build/fontdirectory/andika/builds/build/Andika-Regular.autohint.ttf'

$ ls -l /home/travis/build/fontdirectory/andika/builds/build/Andika-Regular.*ttf # look at the size savings of that subset process
/home/travis/build/fontdirectory/andika/builds/build/Andika-Regular.ttf: 1025604 bytes
/home/travis/build/fontdirectory/andika/builds/build/Andika-Regular.autohint.ttf: 678024 bytes
$ mv /home/travis/build/fontdirectory/andika/builds/build/Andika-Regular.autohint.ttf /home/travis/build/fontdirectory/andika/builds/build/Andika-Regular.ttf
### Subset TTFs (pyftsubset) Andika-Regular.ttf
$ pyftsubset Andika-Regular.latin
$ pyftsubset Andika-Regular.menu
strippedname:/home/travis/build/fontdirectory/andika/builds/build/Andika-Regular.ttf
### (5 of 6) Generate METADATA.json (fontbakery-build-metadata.py)
$ fontbakery-build-metadata.py /home/travis/build/fontdirectory/andika/builds/build
{} exists
Designer's name from font is: Victor Gaultney, Annie Olsen, Julie Remington, Don Collingsworth, Eric Hays
Original size: 678024\nGzip size: 289671
Family Name: Andika
PS Name: Andika
Full Name: Andika
Style: normal
Weight: 400
Filename: Andika-Regular.ttf
Copyright: Copyright (c) 2004-2011, SIL International (http://www.sil.org/). Licensed under the SIL Open Font License, Version 1.1 (http://scripts.sil.org/OFL), with Reserved Font Names "Andika" and "SIL".
### (6 of 6) Run tests for METADATA.json
$ fontbakery-check.py metadata METADATA.json
bakery_lint.tests.metadata_test.MetadataSubsetsListTest.test_charset_cyrillic(): FAIL
bakery_lint.tests.metadata_test.MetadataSubsetsListTest.test_charset_cyrillic_ext(): FAIL
bakery_lint.tests.metadata_test.MetadataSubsetsListTest.test_charset_latin(): FAIL
bakery_lint.tests.metadata_test.MetadataSubsetsListTest.test_charset_latin_ext(): FAIL
bakery_lint.tests.metadata_test.MetadataSubsetsListTest.test_charset_menu(): FAIL
bakery_lint.tests.metadata_test.MetadataTest.test_description_is_more_than_500b(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_description_is_valid_html(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_does_not_familyName_exist_in_daltonmaag_catalogue(): FAIL
bakery_lint.tests.metadata_test.MetadataTest.test_does_not_familyName_exist_in_fontbureau_catalogue(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_does_not_familyName_exist_in_fontscom_catalogue(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_does_not_familyName_exist_in_fontshop_catalogue(): FAIL
bakery_lint.tests.metadata_test.MetadataTest.test_does_not_familyName_exist_in_fontsmith_catalogue(): FAIL
bakery_lint.tests.metadata_test.MetadataTest.test_does_not_familyName_exist_in_houseind_catalogue(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_does_not_familyName_exist_in_myfonts_catalogue(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_does_not_familyName_exist_in_veer_catalogue(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_family_is_listed_in_gwf(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_metadata_atleast_latin_menu_subsets_exist(): OK
/home/travis/virtualenv/python2.7.8/lib/python2.7/site-packages/bakery_lint/tests/metadata_test.py:141: UnicodeWarning: Unicode equal comparison failed to convert both arguments to Unicode - interpreting them as being unequal
  self.assertTrue(designer in designers,
bakery_lint.tests.metadata_test.MetadataTest.test_metadata_designer_exists_in_profiles_csv(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_metadata_fonts_items_dicts(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_metadata_fonts_key_list(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_metadata_fonts_no_dupes(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_metadata_has_unique_style_weight_pairs(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_metadata_keys(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_metadata_license(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_metadata_no_unknown_top_keys(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_metadata_subsets_key_list(): OK
bakery_lint.tests.metadata_test.MetadataTest.test_metadata_top_keys_types(): OK
bakery_lint.tests.downstream.test_check_metadata_fields.CheckMetadataFields.test_check_metadata_fields(): OK
bakery_lint.tests.downstream.test_check_canonical_filenames.CheckCanonicalFilenames.test_check_canonical_filenames(): FAIL
bakery_lint.tests.downstream.test_check_text_files_exist.CheckTextFilesExist.test_copyrighttxt_exists(): FAIL
bakery_lint.tests.downstream.test_check_text_files_exist.CheckTextFilesExist.test_description_exists(): OK
bakery_lint.tests.downstream.test_check_text_files_exist.CheckTextFilesExist.test_fontlogtxt_exists(): OK
bakery_lint.tests.downstream.test_check_text_files_exist.CheckTextFilesExist.test_licensetxt_exists(): FAIL
bakery_lint.tests.downstream.test_check_canonical_styles.CheckCanonicalStyles.test_check_canonical_styles(): ERROR
bakery_lint.tests.downstream.test_check_canonical_weights.CheckCanonicalWeights.test_check_canonical_weights(): ERROR
bakery_lint.tests.downstream.test_check_canonical_weights.CheckPostScriptNameMatchesWeight.test_postscriptname_contains_correct_weight(): FAIL
bakery_lint.tests.downstream.test_check_canonical_weights.CheckFontWeightSameAsInMetadata.test_font_weight_same_as_in_metadata(): ERROR
bakery_lint.tests.downstream.test_check_canonical_weights.CheckFullNameEqualCanonicalName.test_metadata_contains_current_font(): ERROR
bakery_lint.tests.downstream.test_check_subsets_exists.CheckSubsetsExist.test_check_subsets_exists(): FAIL
bakery_lint.tests.downstream.test_check_monospace_agreements.CheckMonospaceAgreement.test_check_monospace_agreement(): OK
bakery_lint.tests.downstream.test_check_familyname_matches_fontnames.CheckFamilyNameMatchesFontNames.test_check_familyname_matches_fontnames(): OK
bakery_lint.tests.downstream.test_check_menu_contains_proper_glyphs.CheckMenuSubsetContainsProperGlyphs.test_check_menu_contains_proper_glyphs(): ERROR
bakery_lint.tests.downstream.test_check_glyph_consistency.CheckGlyphConsistencyInFamily.test_the_same_encodings_of_glyphs_across_family(): ERROR
bakery_lint.tests.downstream.test_check_glyph_consistency.CheckGlyphConsistencyInFamily.test_the_same_names_of_glyphs_across_family(): ERROR
bakery_lint.tests.downstream.test_check_glyph_consistency.CheckGlyphConsistencyInFamily.test_the_same_number_of_glyphs_across_family(): ERROR
bakery_lint.tests.downstream.test_check_metadata_style_matches_names.CheckItalicStyleMatchesMacStyle.test_check_italic_style_matches_names(): OK
bakery_lint.tests.downstream.test_check_metadata_style_matches_names.CheckNormalStyleMatchesMacStyle.test_check_normal_style_matches_names(): ERROR
bakery_lint.tests.downstream.test_metadata_font_copyright.CheckMetadataContainsReservedFontName.test_copyright_contains_correct_rfn(): OK
bakery_lint.tests.downstream.test_metadata_font_copyright.CheckMetadataContainsReservedFontName.test_copyright_is_consistent_across_family(): OK
bakery_lint.tests.downstream.test_metadata_font_copyright.CheckMetadataContainsReservedFontName.test_copyright_matches_pattern(): FAIL
bakery_lint.tests.downstream.test_metadata_font_copyright.CheckMetadataContainsReservedFontName.test_metadata_copyright_size(): OK
bakery_lint.tests.downstream.test_check_files_menu_agreements.CheckFontsMenuAgreements.test_menu_file_agreement(): FAIL
bakery_lint.tests.downstream.test_check_metadata_matches_nametable.CheckMetadataMatchesNameTable.test_check_metadata_matches_nametable(): ERROR
bakery_lint.tests.downstream.test_check_font_name_not_in_camelcase.CheckFontNameNotInCamelCase.test_fontname_not_in_camel_case(): OK
bakery_lint.tests.downstream.test_metadata_agreements.TestFontOnDiskFamilyEqualToMetadataJSON.test_font_on_disk_family_equal_in_metadata_json(): OK
bakery_lint.tests.downstream.test_metadata_agreements.TestPostScriptNameInMetadataEqualFontOnDisk.test_postscriptname_in_metadata_equal_to_font_on_disk(): OK
bakery_lint.tests.downstream.test_metadata_agreements.CheckMetadataAgreements.test_font_name_matches_family(): ERROR
bakery_lint.tests.downstream.test_metadata_agreements.CheckMetadataAgreements.test_metadata_family_values_are_all_the_same(): OK
bakery_lint.tests.downstream.test_metadata_agreements.CheckMetadataAgreements.test_metadata_filename_matches_postscriptname(): FAIL
bakery_lint.tests.downstream.test_metadata_agreements.CheckMetadataAgreements.test_metadata_font_have_regular(): OK
bakery_lint.tests.downstream.test_metadata_agreements.CheckMetadataAgreements.test_metadata_fonts_fields_have_fontname(): ERROR
bakery_lint.tests.downstream.test_metadata_agreements.CheckMetadataAgreements.test_metadata_fullname_is_equal_to_internal_font_fullname(): ERROR
bakery_lint.tests.downstream.test_metadata_agreements.CheckMetadataAgreements.test_metadata_fullname_matches_postScriptName(): OK
bakery_lint.tests.downstream.test_metadata_agreements.CheckMetadataAgreements.test_metadata_regular_is_400(): FAIL
bakery_lint.tests.downstream.test_metadata_agreements.CheckMetadataAgreements.test_metadata_regular_is_normal(): FAIL
{
  "name": "Andika", 
  "designer": "Annie Olsen", 
  "license": "OFL", 
  "visibility": "External", 
  "category": "Sans Serif", 
  "size": 528562, 
  "fonts": [
    {
      "name": "Andika", 
      "postScriptName": "Andika", 
      "fullName": "Andika", 
      "style": "normal", 
      "weight": 400, 
      "filename": "Andika-Regular.ttf", 
      "copyright": "Copyright (c) 2004-2011, SIL International (http://www.sil.org/). Licensed under the SIL Open Font License, Version 1.1 (http://scripts.sil.org/OFL), with Reserved Font Names \"Andika\" and \"SIL\"."
    }
  ], 
  "subsets": [
    "latin", 
    "menu"
  ], 
  "dateAdded": "2011-08-10"
}
